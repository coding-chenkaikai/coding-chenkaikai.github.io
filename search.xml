<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Spring实战 | 快速入门]]></title>
    <url>%2F2018%2F03%2F12%2FSpring%E5%AE%9E%E6%88%98-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[Spring是一个开源框架Spring是一个IOC和AOP框架 阅读之前通过阅读能收获到什么 Spring快速入门 了解Spring声明式事务以及AOP 使用Idea快速搭建SSH环境 快速入门IOC DI AOPSpring提供依赖注入的方式：属性注入、构造器注入、工厂方法注入IOC容器：BeanFactory（IOC容器基本实现）、ApplicationContext（提供更多高级特性，是BeanFactory子类）ApplicationContext的主要实现类：ClassPathXmlApplicationContext和FileSystemXmlApplicationContextConfigurableApplicationContext扩展于ApplicationContext，新增加两个主要方法：refresh和close，让其具有启动、刷新和关闭上下文的能力 英文 名词 描述 IOC 控制反转 反转资源获取的方向 DI 依赖注入 容器对组件依赖的资源以注入的方式提供给组件 AOP 面向切面编程 将应用程序中的商业逻辑同对其提供支持的通用服务进行分离 Bean作用域 作用域 适用范围 描述 singleton 无 在SpringIOC容器中仅存在一个实例 prototype 无 每次调用getBean时都会返回新实例 request WebApplicationContext 每次HTTP请求都会创建一个新实例 session WebApplicationContext 同一个HTTP Session共享一个实例 几个概念SpEL使用#{…}作为定界符在Bean的声明里设置init-method和destroy-method属性，为Bean指定初始化和销毁方法Bean后置处理器允许在调用初始化方法前后对Bean进行额外的处理，实现BeanPostProcessor 几个注解@Component：标识受Spring管理的组件@Respository：标识持久化组件@Service：标识服务组件@Controller：标识控制组件@Authwired：自动装配@Qualifier：可指定注入Bean名称@Resource：自动装配@Inject：自动装配 @Aspect：切面@Before：前置通知，在方法执行之前执行@After：后置通知，在方法执行之后执行@AfterRunning：返回通知，在方法返回结果之后执行@AfterThrowing：异常通知，在方法抛出异常之后@Around：环绕通知，围绕着方法执行@Pointcut：重用切入点@Order：切面优先级，值越小优先级越高 @Transactional：支持事务处理 一个简单基于注解AspectJ实例execution * com.icebreakerzr.rs.ArithmeticCalculator.*(..)：匹配ArithmeticCalculator中声明的所有方法第一个*代表任意修饰符及任意返回值，第二个*代表任意方法，..代表任意数量的参数，若目标类或接口与该切面在同一个包中，可省略包名对于环绕通知来说, 连接点的参数类型必须是ProceedingJoinPoint，它是JoinPoint的子接口 applicationContext.xml配置12345&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans&gt; &lt;context:component-scan base-package="com.icebreakerzr.rs"&gt;&lt;/context:component-scan&gt; &lt;aop:aspectj-autoproxy&gt;&lt;/aop:aspectj-autoproxy&gt;&lt;/beans&gt; 日志切面LoggingAspect.java123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051@Order(2)@Aspect@Componentpublic class LoggingAspect &#123; @Pointcut("execution(public int com.icebreakerzr.rs.api.ArithmeticCalculator.*(..))") public void declareJointPointExpression()&#123;&#125; @Before("declareJointPointExpression()") public void beforeMethod(JoinPoint joinPoint) &#123; String methodName = joinPoint.getSignature().getName(); Object [] args = joinPoint.getArgs(); System.out.println("The method " + methodName + " begins with " + Arrays.asList(args)); &#125; @After("declareJointPointExpression()") public void afterMethod(JoinPoint joinPoint) &#123; String methodName = joinPoint.getSignature().getName(); System.out.println("The method " + methodName + " ends"); &#125; @AfterReturning(value="declareJointPointExpression()", returning="result") public void afterReturning(JoinPoint joinPoint, Object result) &#123; String methodName = joinPoint.getSignature().getName(); System.out.println("The method " + methodName + " ends with " + result); &#125; @AfterThrowing(value="declareJointPointExpression()", throwing="e") public void afterThrowing(JoinPoint joinPoint, Exception e) &#123; String methodName = joinPoint.getSignature().getName(); System.out.println("The method " + methodName + " occurs excetion:" + e); &#125; @Around(value="declareJointPointExpression()") public Object aroundMethod(ProceedingJoinPoint pjd)&#123; Object result = null; String methodName = pjd.getSignature().getName(); try &#123; System.out.println( "The method " + methodName + " begins with " + Arrays.asList(pjd.getArgs())); result = pjd.proceed(); System.out.println("The method " + methodName + " ends with " + result); &#125; catch (Throwable e) &#123; System.out.println("The method " + methodName + " occurs exception:" + e); throw new RuntimeException(e); &#125; System.out.println("The method " + methodName + " ends"); return result; &#125;&#125; 基于xml切面配置切面代码中去除相关注解applicationContext.xml配置 1234567891011121314151617181920212223242526272829303132&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans&gt; &lt;!-- 配置切面的bean --&gt; &lt;bean id="loggingAspect" class="com.icebreakerzr.rs.lib.aop.LoggingAspect"&gt;&lt;/bean&gt; &lt;bean id="vlidationAspect" class="com.icebreakerzr.rs.lib.aop.VlidationAspect"&gt;&lt;/bean&gt; &lt;!-- 配置AOP --&gt; &lt;aop:config&gt; &lt;!-- 配置切点表达式 --&gt; &lt;aop:pointcut expression="execution(* com.icebreakerzr.rs.api.ArithmeticCalculator.*(int, int))" id="pointcut"/&gt; &lt;!-- 配置切面及通知 --&gt; &lt;aop:aspect ref="loggingAspect" order="2"&gt; &lt;aop:before method="beforeMethod" pointcut-ref="pointcut"/&gt; &lt;aop:after method="afterMethod" pointcut-ref="pointcut"/&gt; &lt;aop:after-throwing method="afterThrowing" pointcut-ref="pointcut" throwing="e"/&gt; &lt;aop:after-returning method="afterReturning" pointcut-ref="pointcut" returning="result"/&gt; &lt;!-- &lt;aop:around method="aroundMethod" pointcut-ref="pointcut"/&gt; --&gt; &lt;/aop:aspect&gt; &lt;aop:aspect ref="vlidationAspect" order="1"&gt; &lt;aop:before method="validateArgs" pointcut-ref="pointcut"/&gt; &lt;/aop:aspect&gt; &lt;/aop:config&gt;&lt;/beans&gt; 声明式事务事务基本属性ACID 属性 英文 描述 原子性 atomicity 事务的原子性确保动作要么全部成功要么完全失败 一致性 consistency 一旦所有事务动作完成，事务就被提交，数据和资源就处于一种满足业务规则的一致性状态中 隔离性 isolation 多个事务同时操作相同数据，保证每个事务相互隔离 持久性 durability 事务的结果被写到持久化存储器中 Spring支持事务传播行为当事务方法被另一个事务方法调用时，必须指定事务应该如何传播 传播行为 描述 REQUIRED 如果有事务在运行，当前的方法就在这个事务内运行 REQUIRED_NEW 当前的方法必须启动新事务，并在它自己的事务内运行，如果有事务在运行，应该将它挂起 SUPPORTS 如果有事务在运行，当前的方法就在这个事务内运行，否则它可以不运行在事务内 NOT_SUPPORTED 当前的方法不应该运行在事务内，如有运行的事务，将它挂起 MANDATORY 当前的方法必须运行在事务内，如果没有正在运行的事务，抛出异常 NEVER 当前的方法不应该运行在事务中，如果有运行的事务，抛出异常 NESTED 如果有事务在运行，当前方法就应该在这个事务的嵌套事务内运行，否则，就启动一个新事务，并在它自己的事务内运行 注解配置Transactional注解属性：rollbackFor遇到时必须进行回滚，noRollbackFor遇到时必须不回滚超时事务属性：事务在强制回滚之前超时时间只读事务属性：表示该事务只能读取数据 123456789101112131415161718@Authwiredpublic class BookServiceImpl implements BookService &#123; @Autowired private BookDao bookDao; // @Transactional(propagation=Propagation.REQUIRES_NEW,// isolation=Isolation.READ_COMMITTED,// noRollbackFor=&#123;UserAccountException.class&#125;) @Transactional(propagation=Propagation.REQUIRES_NEW, isolation=Isolation.READ_COMMITTED, readOnly=false, timeout=3) @Override public void purchase(String username, String isbn) &#123; &#125;&#125; xml配置123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans&gt; &lt;context:component-scan base-package="com.icebreakerzr.rs"&gt;&lt;/context:component-scan&gt; &lt;context:property-placeholder location="classpath:db.properties"/&gt; &lt;bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"&gt; &lt;property name="user" value="$&#123;jdbc.user&#125;"&gt;&lt;/property&gt; &lt;property name="password" value="$&#123;jdbc.password&#125;"&gt;&lt;/property&gt; &lt;property name="jdbcUrl" value="$&#123;jdbc.jdbcUrl&#125;"&gt;&lt;/property&gt; &lt;property name="driverClass" value="$&#123;jdbc.driverClass&#125;"&gt;&lt;/property&gt; &lt;property name="initialPoolSize" value="$&#123;jdbc.initPoolSize&#125;"&gt;&lt;/property&gt; &lt;property name="maxPoolSize" value="$&#123;jdbc.maxPoolSize&#125;"&gt;&lt;/property&gt; &lt;/bean&gt; &lt;bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"&gt; &lt;property name="dataSource" ref="dataSource"&gt;&lt;/property&gt; &lt;/bean&gt; &lt;bean id="bookDao" class="com.icebreakerzr.rs.core.dao.impl.BookDaoImpl"&gt; &lt;property name="jdbcTemplate" ref="jdbcTemplate"&gt;&lt;/property&gt; &lt;/bean&gt; &lt;bean id="bookService" class="com.icebreakerzr.rs.api.service.impl.BookServiceImpl"&gt; &lt;property name="bookDao" ref="bookDao"&gt;&lt;/property&gt; &lt;/bean&gt; &lt;!-- 配置事务管理器 --&gt; &lt;bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"&gt; &lt;property name="dataSource" ref="dataSource"&gt;&lt;/property&gt; &lt;/bean&gt; &lt;!-- 配置事务属性 --&gt; &lt;tx:advice id="txAdvice" transaction-manager="transactionManager"&gt; &lt;tx:attributes&gt; &lt;tx:method name="purchase" propagation="REQUIRES_NEW"/&gt; &lt;tx:method name="get*" read-only="true"/&gt; &lt;tx:method name="find*" read-only="true"/&gt; &lt;tx:method name="*"/&gt; &lt;/tx:attributes&gt; &lt;/tx:advice&gt; &lt;!-- 配置事务切入点，以及把事务切入点和事务属性关联起来 --&gt; &lt;aop:config&gt; &lt;aop:pointcut expression="execution(* com.icebreakerzr.rs.api.service.*.*(..))" id="txPointCut"/&gt; &lt;aop:advisor advice-ref="txAdvice" pointcut-ref="txPointCut"/&gt; &lt;/aop:config&gt;&lt;/beans&gt; SSH整合总结]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hibernate实战 | 快速入门]]></title>
    <url>%2F2018%2F03%2F11%2FHibernate%E5%AE%9E%E6%88%98-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[Working with both Object-Oriented software and Relational Databases can be cumbersome and time consuming. Development costs are significantly higher due to a paradigm mismatch between how data is represented in objects versus relational databases. Hibernate is an Object/Relational Mapping (ORM) solution for Java environments. 阅读之前通过阅读能收获到什么 Hibernate快速入门 了解数据库事务隔离级别，自定义MySQL隔离级别 使用Idea快速搭建Hibernate项目 快速入门CentOS快速安装MySQL12345678910111213141516$ wget -c https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm$ rpm -ivh mysql57-community-release-el7-11.noarch.rpm# 安装mysql$ yum update -y &amp;&amp; yum upgrade -y$ yum install mysql-community-server.x86_64 mysql-community-client.x86_64 -y# 启动mysql$ systemctl start mysqld &amp;&amp; systemctl status mysqld# 更新密码$ cat /var/log/mysqld.log | grep password$ mysqladmin -uroot -p'origin_password' password$ mysql -uroot -p&gt; grant all privileges on *.* to 'root'@'%' identified by 'change_password';&gt; flush privileges; pom.xml配置1234567891011&lt;dependency&gt; &lt;groupId&gt;org.hibernate&lt;/groupId&gt; &lt;artifactId&gt;hibernate-core&lt;/artifactId&gt; &lt;version&gt;5.2.15.Final&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;6.0.6&lt;/version&gt;&lt;/dependency&gt; hibernate.cfg.xml关于hbm2ddl.auto配置：create | update | create-drop | validate 1234567891011121314151617&lt;hibernate-configuration&gt; &lt;session-factory&gt; &lt;property name="connection.url"&gt; jdbc:mysql://192.168.0.100:3306/hibernate?characterEncoding=UTF-8&amp;amp;serverTimezone=UTC &lt;/property&gt; &lt;property name="connection.driver_class"&gt;com.mysql.jdbc.Driver&lt;/property&gt; &lt;property name="connection.username"&gt;root&lt;/property&gt; &lt;property name="connection.password"&gt;password&lt;/property&gt; &lt;property name="dialect"&gt;org.hibernate.dialect.MySQL57Dialect&lt;/property&gt; &lt;property name="show_sql"&gt;true&lt;/property&gt; &lt;property name="format_sql"&gt;true&lt;/property&gt; &lt;property name="hbm2ddl.auto"&gt;create&lt;/property&gt; &lt;mapping class="com.icebreakerzr.op.model.User"&gt;&lt;/mapping&gt; &lt;/session-factory&gt;&lt;/hibernate-configuration&gt; 几个对象12345678910111213141516171819202122232425import org.hibernate.Session;import org.hibernate.SessionFactory;import org.hibernate.Transaction;import org.hibernate.cfg.Configuration;public class AppTest &#123; private SessionFactory sessionFactory; private Session session; private Transaction transaction; @Before public void before() &#123; Configuration configuration = new Configuration().configure(); sessionFactory = configuration.buildSessionFactory(); session = sessionFactory.openSession(); transaction = session.beginTransaction(); &#125; @After public void after() &#123; transaction.commit(); session.close(); sessionFactory.close(); &#125;&#125; 几个方法persist()和save()的区别：当对一个OID不为Null的对象执行操作时，persist()抛出异常get()和load()的区别：数据库不存在OID对应记录时，load()抛出异常；load()支持延迟加载 进阶运用调用存储过程12345678910111213public class AppTest &#123; private Session session; @Test public void testProcedure() &#123; session.doWork(c -&gt; &#123; String procedure = "&#123;call userProcedure&#125;"; CallableStatement callableStatement = c.prepareCall(procedure); callableStatement.executeUpdate(); &#125;); &#125;&#125; 数据库事务隔离级别 隔离级别 英文 描述 并发问题 读未提交 READ UNCOMMITTED 允许事务读取未被其他事务提交的变更 脏读 不可重复读 幻读 读已提交 READ COMMITTED 只允许事务读取已被提交的变更 不可重复读 幻读 可重复读 REPEATABLE READ 确保事务多次从一个字段中读取相同的值 幻读 串行化 SERIALIZABLE 事务顺序执行 无 MySQL设置隔离级别MySQL默认隔离级别为REPEATABLE READ 123select @@tx_isolation;set transaction isolation level read committed;set global transaction isolation level read committed; 最佳实践Idea创建Hibernate 创建Maven项目File &gt; New Project &gt; Maven Ctrl + Alt + Shift + S &gt; Facets &gt; + &gt; Hibernate (Choose Module) View &gt; Tool Windows &gt; Database &gt; + &gt; MySQL &gt; New &gt; Table View &gt; Tool Windows &gt; Persistence &gt; Generate Persistence Mapping &gt; By Datasource Schema 总结]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>hibernate</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Struts2实战 | 快速入门]]></title>
    <url>%2F2018%2F03%2F11%2FStruts2%E5%AE%9E%E6%88%98-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[Apache Struts is a free, open-source, MVC framework for creating elegant, modern Java web applications. It favors convention over configuration, is extensible using a plugin architecture, and ships with plugins to support REST, AJAX and JSON. 阅读之前通过阅读能收获到什么 Struts快速入门 使用Struts实现文件上传下载，自定义实现拦截器 使用Idea快速搭建Struts项目 快速入门pom.xml配置123456789101112&lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;servlet-api&lt;/artifactId&gt; &lt;version&gt;2.5&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.struts&lt;/groupId&gt; &lt;artifactId&gt;struts2-core&lt;/artifactId&gt; &lt;version&gt;2.5.14&lt;/version&gt;&lt;/dependency&gt; web.xml配置123456789&lt;filter&gt; &lt;filter-name&gt;struts2&lt;/filter-name&gt; &lt;filter-class&gt;org.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter&lt;/filter-class&gt;&lt;/filter&gt;&lt;filter-mapping&gt; &lt;filter-name&gt;struts2&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt;&lt;/filter-mapping&gt; struts.xml配置1234567&lt;struts&gt; &lt;package name="front" namespace="/" extends="struts-default"&gt; &lt;action name="*_detail" class="com.icebreakerzr.rs.action.&#123;1&#125;" method="detail"&gt; &lt;result name="success" type="dispatcher"&gt;/WEB-INF/details/&#123;1&#125;.jsp&lt;/result&gt; &lt;/action&gt; &lt;/package&gt;&lt;/struts&gt; Action访问web资源 与Servlet API解耦的方式 通过com.opensymphony.xwork2.ActionContext 通过实现ApplicationAware, SessionAware, RequestAware 与Servlet API耦合的方式 通过org.apache.struts2.ServletActionContext 通过实现ServletRequestAware, ServletContextAware 进阶运用Struts2运行流程相关API官方解释： ActionMapping: Simple class that holds the action mapping information used to invoke a Struts action.ActionMapper：When given an HttpServletRequest, the ActionMapper may return null if no action invocation request matches, or it may return an ActionMapping that describes an action invocation for the framework to tryActionProxy：ActionProxy is an extra layer between XWork and the action so that different proxies are possible.ActionInvocation：An ActionInvocation represents the execution state of an Action. 文件上传下载文件上传拦截器struts.xml 12345678910111213&lt;struts&gt; &lt;package name="default" namespace="/" extends="struts-default"&gt; &lt;action name="fileUpload" class="com.icebreakerzr.rs.action.UploadAction"&gt; &lt;interceptor-ref name="defaultStack"&gt; &lt;param name="fileUpload.maximumSize"&gt;2097152&lt;/param&gt; &lt;param name="fileUpload.allowedTypes"&gt;text/html,text/xml&lt;/param&gt; &lt;param name="fileUpload.allowedExtensions"&gt;html,dtd,xml&lt;/param&gt; &lt;/interceptor-ref&gt; &lt;result&gt;/success.jsp&lt;/result&gt; &lt;result name="error"&gt;/error.jsp&lt;/result&gt; &lt;/action&gt; &lt;/package&gt;&lt;/struts&gt; 拦截器实现com.opensymphony.xwork2.interceptor.Interceptor自定义拦截器struts.xml 12345678910111213141516171819&lt;struts&gt; &lt;package name="default" namespace="/" extends="struts-default"&gt; &lt;interceptors&gt; &lt;interceptor name="customizeInterceptor" class="com.icebreakerzr.rs.interceptors.CustomizeInterceptor"&gt;&lt;/interceptor&gt; &lt;interceptor-stack name="customizeStack"&gt; &lt;interceptor-ref name="customizeInterceptor"&gt;&lt;/interceptor-ref&gt; &lt;interceptor-ref name="defaultStack"&gt;&lt;/interceptor-ref&gt; &lt;/interceptor-stack&gt; &lt;/interceptors&gt; &lt;default-interceptor-ref name="customizeStack"&gt;&lt;/default-interceptor-ref&gt; &lt;action name="say" class="com.icebreakerzr.rs.action.sayAction"&gt; &lt;result&gt;/success.jsp&lt;/result&gt; &lt;/action&gt; &lt;/package&gt;&lt;/struts&gt; 最佳实践Idea创建Struts2 创建Maven项目File &gt; New Project &gt; Maven Ctrl + Alt + Shift + S &gt; Facets &gt; + &gt; Web (Choose Module) Artifacts &gt; + &gt; Available Elements &gt; Put into Output Root Edit Configurations &gt; + &gt; Tomcat Server 总结]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>struts</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自动化构建 | Maven]]></title>
    <url>%2F2018%2F03%2F10%2F%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA-Maven%2F</url>
    <content type="text"><![CDATA[Apache Maven is a software project management and comprehension tool. Based on the concept of a project object model (POM), Maven can manage a project’s build, reporting and documentation from a central piece of information. 阅读之前通过阅读能收获到什么 Maven快速入门 使用Maven快速搭建大型项目 快速入门常用命令123456789101112131415161718192021222324252627$ mvn archetype:create -DarchetypeArtifactId=maven-archetype-quickstart -DgroupId=packageName -DartifactId=projectName -Dversion=0.01-SNAPSHOT$ mvn archetype:create -DarchetypeArtifactId=maven-archetype-webapp -DgroupId=packageName -DartifactId=webappName -Dversion=0.01-SNAPSHOT$ mvn compile // 编译源代码$ mvn test-compile // 编译测试代码$ mvn test // 运行测试$ mvn site // 产生site$ mvn package // 打包$ mvn install // 在本地仓库中安装$ mvn clean // 清理$ mvn eclipse:eclipse // 生成eclipse项目$ mvn idea:idea // 生成idea项目$ mvn deploy // 上传至私有服务器$ mvn dependency:list // 查看当前项目已被解析的依赖$ mvn dependency:resolve // 打印出已解决依赖的列表$ mvn dependency:tree // 打印整个依赖树$ mvn jetty:run // 运行在jetty$ mvn tomcat:run // 运行在tomcat 依赖范围官方解释： compile: This is the default scope, used if none is specified. Compile dependencies are available in all classpaths of a project.provided: This is much like compile, but indicates you expect the JDK or a container to provide the dependency at runtime.runtime: It is in the runtime and test classpaths, but not the compile classpath.test: This scope indicates that the dependency is not required for normal use of the application, and is only available for the test compilation and execution phases.system: This scope is similar to provided except that you have to provide the JAR which contains it explicitly.import: This scope is only supported on a dependency of type pom in the section. 中文解释： compile：默认，编译测试运行均有效 provided：编译和测试有效 runtime：测试和运行有效 test：测试有效 system：类似于provided，但system范围需要指定JAR import：导入 依赖传递 排除指定依赖12345678910111213141516171819202122&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;3.8.1&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.icebreaker.rs&lt;/groupId&gt; &lt;artifactId&gt;rs-core&lt;/artifactId&gt; &lt;version&gt;1.0.1-SNAPSHOT&lt;/version&gt; &lt;!-- 排除依赖 --&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;com.icebreaker.rs&lt;/groupId&gt; &lt;artifactId&gt;rs-core-lib&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt;&lt;/dependencies&gt; 最佳实践实例结构12345678910.├── rs-parent| └── pom.xml&lt;2&gt;├── rs-apis| ├── rs-api-app| | └── pom.xml| ├── rs-api-other| | └── pom.xml| └── pom.xml&lt;3&gt;└── pom.xml&lt;1&gt; 实例详解项目中maven配置文件，目标&lt;1&gt;所在位置 1234567891011121314151617181920212223242526272829303132333435363738&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.icebreaker.rs&lt;/groupId&gt; &lt;artifactId&gt;rs-server-build&lt;/artifactId&gt; &lt;packaging&gt;pom&lt;/packaging&gt; &lt;version&gt;1.0.1-SNAPSHOT&lt;/version&gt; &lt;name&gt;rs-server-build&lt;/name&gt; &lt;profiles&gt; &lt;profile&gt; &lt;id&gt;default&lt;/id&gt; &lt;activation&gt; &lt;activeByDefault&gt;true&lt;/activeByDefault&gt; &lt;/activation&gt; &lt;modules&gt; &lt;module&gt;rs-parent&lt;/module&gt; &lt;module&gt;rs-lib&lt;/module&gt; &lt;module&gt;rs-cores&lt;/module&gt; &lt;module&gt;rs-apis&lt;/module&gt; &lt;module&gt;rs-tasks&lt;/module&gt; &lt;/modules&gt; &lt;/profile&gt; &lt;profile&gt; &lt;id&gt;api&lt;/id&gt; &lt;modules&gt; &lt;module&gt;rs-parent&lt;/module&gt; &lt;module&gt;rs-lib&lt;/module&gt; &lt;module&gt;rs-cores&lt;/module&gt; &lt;module&gt;rs-apis&lt;/module&gt; &lt;/modules&gt; &lt;/profile&gt; &lt;/profiles&gt;&lt;/project&gt; 独立模块rs-parent中maven配置文件，目标&lt;2&gt;所在位置 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.icebreaker.rs&lt;/groupId&gt; &lt;artifactId&gt;rs-parent&lt;/artifactId&gt; &lt;version&gt;1.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;pom&lt;/packaging&gt; &lt;properties&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt; &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt; &lt;commons-lang3.version&gt;3.5&lt;/commons-lang3.version&gt; &lt;commons-io.version&gt;2.5&lt;/commons-io.version&gt; &lt;commons-fileupload.version&gt;1.3.2&lt;/commons-fileupload.version&gt; &lt;spring-boot.version&gt;1.5.3.RELEASE&lt;/spring-boot.version&gt; &lt;maven-clean-plugin.version&gt;2.6.1&lt;/maven-clean-plugin.version&gt; &lt;maven-compiler-plugin.version&gt;3.1&lt;/maven-compiler-plugin.version&gt; &lt;maven-dependency-plugin.version&gt;2.10&lt;/maven-dependency-plugin.version&gt; &lt;maven-deploy-plugin.version&gt;2.8.2&lt;/maven-deploy-plugin.version&gt; &lt;maven-assembly-plugin.version&gt;2.6&lt;/maven-assembly-plugin.version&gt; &lt;maven-surefire-plugin-version&gt;2.19.1&lt;/maven-surefire-plugin-version&gt; &lt;/properties&gt; &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.commons&lt;/groupId&gt; &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt; &lt;version&gt;$&#123;commons-lang3.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;commons-io&lt;/groupId&gt; &lt;artifactId&gt;commons-io&lt;/artifactId&gt; &lt;version&gt;$&#123;commons-io.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt; &lt;version&gt;$&#123;spring-boot.version&#125;&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;version&gt;$&#123;spring-boot.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-undertow&lt;/artifactId&gt; &lt;version&gt;$&#123;spring-boot.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;commons-fileupload&lt;/groupId&gt; &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt; &lt;version&gt;$&#123;commons-fileupload.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt; &lt;build&gt; &lt;pluginManagement&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-clean-plugin&lt;/artifactId&gt; &lt;version&gt;$&#123;maven-clean-plugin.version&#125;&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;version&gt;$&#123;maven-compiler-plugin.version&#125;&lt;/version&gt; &lt;configuration&gt; &lt;source&gt;$&#123;maven.compiler.source&#125;&lt;/source&gt; &lt;target&gt;$&#123;maven.compiler.target&#125;&lt;/target&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-deploy-plugin&lt;/artifactId&gt; &lt;version&gt;$&#123;maven-deploy-plugin.version&#125;&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt; &lt;version&gt;$&#123;maven-dependency-plugin.version&#125;&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;version&gt;$&#123;spring-boot.version&#125;&lt;/version&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/pluginManagement&gt; &lt;/build&gt;&lt;/project&gt; 独立模块rs-apis中maven配置文件，目标&lt;3&gt;所在位置 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;parent&gt; &lt;artifactId&gt;rs-parent&lt;/artifactId&gt; &lt;groupId&gt;com.icebreaker.rs&lt;/groupId&gt; &lt;version&gt;1.0.1-SNAPSHOT&lt;/version&gt; &lt;relativePath&gt;../rs-parent&lt;/relativePath&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;rs-api-parent&lt;/artifactId&gt; &lt;packaging&gt;pom&lt;/packaging&gt; &lt;modules&gt; &lt;module&gt;rs-api-common&lt;/module&gt; &lt;module&gt;rs-api-app&lt;/module&gt; &lt;/modules&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-undertow&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-autoconfigure&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; 总结文章主要总结了Maven的基本用法，结合实际案例，说明生产环境如何通过Maven组织大型项目结构]]></content>
      <categories>
        <category>基础架构</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
</search>
